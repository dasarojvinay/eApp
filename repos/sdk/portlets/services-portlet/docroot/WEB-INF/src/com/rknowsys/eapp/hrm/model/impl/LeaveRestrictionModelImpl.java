/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rknowsys.eapp.hrm.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rknowsys.eapp.hrm.model.LeaveRestriction;
import com.rknowsys.eapp.hrm.model.LeaveRestrictionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LeaveRestriction service. Represents a row in the &quot;leave_restriction&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rknowsys.eapp.hrm.model.LeaveRestrictionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LeaveRestrictionImpl}.
 * </p>
 *
 * @author rknowsys
 * @see LeaveRestrictionImpl
 * @see com.rknowsys.eapp.hrm.model.LeaveRestriction
 * @see com.rknowsys.eapp.hrm.model.LeaveRestrictionModel
 * @generated
 */
public class LeaveRestrictionModelImpl extends BaseModelImpl<LeaveRestriction>
	implements LeaveRestrictionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a leave restriction model instance should use the {@link com.rknowsys.eapp.hrm.model.LeaveRestriction} interface instead.
	 */
	public static final String TABLE_NAME = "leave_restriction";
	public static final Object[][] TABLE_COLUMNS = {
			{ "leaveRestrictionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "leaveTypeId", Types.BIGINT },
			{ "cannotExceedBalance", Types.BOOLEAN },
			{ "cantExceedBalForRoleIds", Types.VARCHAR },
			{ "cannotApplyForPartialDay", Types.BOOLEAN },
			{ "cantApplyPartialDayForRoleIds", Types.VARCHAR },
			{ "termsQuestion", Types.VARCHAR },
			{ "termsQsnForRoleIds", Types.VARCHAR },
			{ "errorTextIfTermsDeclined", Types.VARCHAR },
			{ "minimumServicePeriod", Types.VARCHAR },
			{ "minServicePeriodForRoleIds", Types.VARCHAR },
			{ "maxConsecutiveLeaves", Types.VARCHAR },
			{ "maxConsecLeavesForRoleIds", Types.VARCHAR },
			{ "maxSmallChildAgeApplicable", Types.VARCHAR },
			{ "maxSmallChildAgeForRoleIds", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table leave_restriction (leaveRestrictionId LONG not null primary key,companyId LONG,groupId LONG,createDate DATE null,modifiedDate DATE null,userId LONG,leaveTypeId LONG,cannotExceedBalance BOOLEAN,cantExceedBalForRoleIds VARCHAR(75) null,cannotApplyForPartialDay BOOLEAN,cantApplyPartialDayForRoleIds VARCHAR(75) null,termsQuestion VARCHAR(75) null,termsQsnForRoleIds VARCHAR(75) null,errorTextIfTermsDeclined VARCHAR(75) null,minimumServicePeriod VARCHAR(75) null,minServicePeriodForRoleIds VARCHAR(75) null,maxConsecutiveLeaves VARCHAR(75) null,maxConsecLeavesForRoleIds VARCHAR(75) null,maxSmallChildAgeApplicable VARCHAR(75) null,maxSmallChildAgeForRoleIds VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table leave_restriction";
	public static final String ORDER_BY_JPQL = " ORDER BY leaveRestriction.leaveRestrictionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY leave_restriction.leaveRestrictionId ASC";
	public static final String DATA_SOURCE = "hrmDataSource";
	public static final String SESSION_FACTORY = "hrmSessionFactory";
	public static final String TX_MANAGER = "hrmTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rknowsys.eapp.hrm.model.LeaveRestriction"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rknowsys.eapp.hrm.model.LeaveRestriction"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rknowsys.eapp.hrm.model.LeaveRestriction"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long LEAVETYPEID_COLUMN_BITMASK = 2L;
	public static long LEAVERESTRICTIONID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rknowsys.eapp.hrm.model.LeaveRestriction"));

	public LeaveRestrictionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _leaveRestrictionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLeaveRestrictionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _leaveRestrictionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LeaveRestriction.class;
	}

	@Override
	public String getModelClassName() {
		return LeaveRestriction.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("leaveRestrictionId", getLeaveRestrictionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("userId", getUserId());
		attributes.put("leaveTypeId", getLeaveTypeId());
		attributes.put("cannotExceedBalance", getCannotExceedBalance());
		attributes.put("cantExceedBalForRoleIds", getCantExceedBalForRoleIds());
		attributes.put("cannotApplyForPartialDay", getCannotApplyForPartialDay());
		attributes.put("cantApplyPartialDayForRoleIds",
			getCantApplyPartialDayForRoleIds());
		attributes.put("termsQuestion", getTermsQuestion());
		attributes.put("termsQsnForRoleIds", getTermsQsnForRoleIds());
		attributes.put("errorTextIfTermsDeclined", getErrorTextIfTermsDeclined());
		attributes.put("minimumServicePeriod", getMinimumServicePeriod());
		attributes.put("minServicePeriodForRoleIds",
			getMinServicePeriodForRoleIds());
		attributes.put("maxConsecutiveLeaves", getMaxConsecutiveLeaves());
		attributes.put("maxConsecLeavesForRoleIds",
			getMaxConsecLeavesForRoleIds());
		attributes.put("maxSmallChildAgeApplicable",
			getMaxSmallChildAgeApplicable());
		attributes.put("maxSmallChildAgeForRoleIds",
			getMaxSmallChildAgeForRoleIds());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long leaveRestrictionId = (Long)attributes.get("leaveRestrictionId");

		if (leaveRestrictionId != null) {
			setLeaveRestrictionId(leaveRestrictionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long leaveTypeId = (Long)attributes.get("leaveTypeId");

		if (leaveTypeId != null) {
			setLeaveTypeId(leaveTypeId);
		}

		Boolean cannotExceedBalance = (Boolean)attributes.get(
				"cannotExceedBalance");

		if (cannotExceedBalance != null) {
			setCannotExceedBalance(cannotExceedBalance);
		}

		String cantExceedBalForRoleIds = (String)attributes.get(
				"cantExceedBalForRoleIds");

		if (cantExceedBalForRoleIds != null) {
			setCantExceedBalForRoleIds(cantExceedBalForRoleIds);
		}

		Boolean cannotApplyForPartialDay = (Boolean)attributes.get(
				"cannotApplyForPartialDay");

		if (cannotApplyForPartialDay != null) {
			setCannotApplyForPartialDay(cannotApplyForPartialDay);
		}

		String cantApplyPartialDayForRoleIds = (String)attributes.get(
				"cantApplyPartialDayForRoleIds");

		if (cantApplyPartialDayForRoleIds != null) {
			setCantApplyPartialDayForRoleIds(cantApplyPartialDayForRoleIds);
		}

		String termsQuestion = (String)attributes.get("termsQuestion");

		if (termsQuestion != null) {
			setTermsQuestion(termsQuestion);
		}

		String termsQsnForRoleIds = (String)attributes.get("termsQsnForRoleIds");

		if (termsQsnForRoleIds != null) {
			setTermsQsnForRoleIds(termsQsnForRoleIds);
		}

		String errorTextIfTermsDeclined = (String)attributes.get(
				"errorTextIfTermsDeclined");

		if (errorTextIfTermsDeclined != null) {
			setErrorTextIfTermsDeclined(errorTextIfTermsDeclined);
		}

		String minimumServicePeriod = (String)attributes.get(
				"minimumServicePeriod");

		if (minimumServicePeriod != null) {
			setMinimumServicePeriod(minimumServicePeriod);
		}

		String minServicePeriodForRoleIds = (String)attributes.get(
				"minServicePeriodForRoleIds");

		if (minServicePeriodForRoleIds != null) {
			setMinServicePeriodForRoleIds(minServicePeriodForRoleIds);
		}

		String maxConsecutiveLeaves = (String)attributes.get(
				"maxConsecutiveLeaves");

		if (maxConsecutiveLeaves != null) {
			setMaxConsecutiveLeaves(maxConsecutiveLeaves);
		}

		String maxConsecLeavesForRoleIds = (String)attributes.get(
				"maxConsecLeavesForRoleIds");

		if (maxConsecLeavesForRoleIds != null) {
			setMaxConsecLeavesForRoleIds(maxConsecLeavesForRoleIds);
		}

		String maxSmallChildAgeApplicable = (String)attributes.get(
				"maxSmallChildAgeApplicable");

		if (maxSmallChildAgeApplicable != null) {
			setMaxSmallChildAgeApplicable(maxSmallChildAgeApplicable);
		}

		String maxSmallChildAgeForRoleIds = (String)attributes.get(
				"maxSmallChildAgeForRoleIds");

		if (maxSmallChildAgeForRoleIds != null) {
			setMaxSmallChildAgeForRoleIds(maxSmallChildAgeForRoleIds);
		}
	}

	@Override
	public long getLeaveRestrictionId() {
		return _leaveRestrictionId;
	}

	@Override
	public void setLeaveRestrictionId(long leaveRestrictionId) {
		_leaveRestrictionId = leaveRestrictionId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public long getLeaveTypeId() {
		return _leaveTypeId;
	}

	@Override
	public void setLeaveTypeId(long leaveTypeId) {
		_columnBitmask |= LEAVETYPEID_COLUMN_BITMASK;

		if (!_setOriginalLeaveTypeId) {
			_setOriginalLeaveTypeId = true;

			_originalLeaveTypeId = _leaveTypeId;
		}

		_leaveTypeId = leaveTypeId;
	}

	public long getOriginalLeaveTypeId() {
		return _originalLeaveTypeId;
	}

	@Override
	public boolean getCannotExceedBalance() {
		return _cannotExceedBalance;
	}

	@Override
	public boolean isCannotExceedBalance() {
		return _cannotExceedBalance;
	}

	@Override
	public void setCannotExceedBalance(boolean cannotExceedBalance) {
		_cannotExceedBalance = cannotExceedBalance;
	}

	@Override
	public String getCantExceedBalForRoleIds() {
		if (_cantExceedBalForRoleIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _cantExceedBalForRoleIds;
		}
	}

	@Override
	public void setCantExceedBalForRoleIds(String cantExceedBalForRoleIds) {
		_cantExceedBalForRoleIds = cantExceedBalForRoleIds;
	}

	@Override
	public boolean getCannotApplyForPartialDay() {
		return _cannotApplyForPartialDay;
	}

	@Override
	public boolean isCannotApplyForPartialDay() {
		return _cannotApplyForPartialDay;
	}

	@Override
	public void setCannotApplyForPartialDay(boolean cannotApplyForPartialDay) {
		_cannotApplyForPartialDay = cannotApplyForPartialDay;
	}

	@Override
	public String getCantApplyPartialDayForRoleIds() {
		if (_cantApplyPartialDayForRoleIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _cantApplyPartialDayForRoleIds;
		}
	}

	@Override
	public void setCantApplyPartialDayForRoleIds(
		String cantApplyPartialDayForRoleIds) {
		_cantApplyPartialDayForRoleIds = cantApplyPartialDayForRoleIds;
	}

	@Override
	public String getTermsQuestion() {
		if (_termsQuestion == null) {
			return StringPool.BLANK;
		}
		else {
			return _termsQuestion;
		}
	}

	@Override
	public void setTermsQuestion(String termsQuestion) {
		_termsQuestion = termsQuestion;
	}

	@Override
	public String getTermsQsnForRoleIds() {
		if (_termsQsnForRoleIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _termsQsnForRoleIds;
		}
	}

	@Override
	public void setTermsQsnForRoleIds(String termsQsnForRoleIds) {
		_termsQsnForRoleIds = termsQsnForRoleIds;
	}

	@Override
	public String getErrorTextIfTermsDeclined() {
		if (_errorTextIfTermsDeclined == null) {
			return StringPool.BLANK;
		}
		else {
			return _errorTextIfTermsDeclined;
		}
	}

	@Override
	public void setErrorTextIfTermsDeclined(String errorTextIfTermsDeclined) {
		_errorTextIfTermsDeclined = errorTextIfTermsDeclined;
	}

	@Override
	public String getMinimumServicePeriod() {
		if (_minimumServicePeriod == null) {
			return StringPool.BLANK;
		}
		else {
			return _minimumServicePeriod;
		}
	}

	@Override
	public void setMinimumServicePeriod(String minimumServicePeriod) {
		_minimumServicePeriod = minimumServicePeriod;
	}

	@Override
	public String getMinServicePeriodForRoleIds() {
		if (_minServicePeriodForRoleIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _minServicePeriodForRoleIds;
		}
	}

	@Override
	public void setMinServicePeriodForRoleIds(String minServicePeriodForRoleIds) {
		_minServicePeriodForRoleIds = minServicePeriodForRoleIds;
	}

	@Override
	public String getMaxConsecutiveLeaves() {
		if (_maxConsecutiveLeaves == null) {
			return StringPool.BLANK;
		}
		else {
			return _maxConsecutiveLeaves;
		}
	}

	@Override
	public void setMaxConsecutiveLeaves(String maxConsecutiveLeaves) {
		_maxConsecutiveLeaves = maxConsecutiveLeaves;
	}

	@Override
	public String getMaxConsecLeavesForRoleIds() {
		if (_maxConsecLeavesForRoleIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _maxConsecLeavesForRoleIds;
		}
	}

	@Override
	public void setMaxConsecLeavesForRoleIds(String maxConsecLeavesForRoleIds) {
		_maxConsecLeavesForRoleIds = maxConsecLeavesForRoleIds;
	}

	@Override
	public String getMaxSmallChildAgeApplicable() {
		if (_maxSmallChildAgeApplicable == null) {
			return StringPool.BLANK;
		}
		else {
			return _maxSmallChildAgeApplicable;
		}
	}

	@Override
	public void setMaxSmallChildAgeApplicable(String maxSmallChildAgeApplicable) {
		_maxSmallChildAgeApplicable = maxSmallChildAgeApplicable;
	}

	@Override
	public String getMaxSmallChildAgeForRoleIds() {
		if (_maxSmallChildAgeForRoleIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _maxSmallChildAgeForRoleIds;
		}
	}

	@Override
	public void setMaxSmallChildAgeForRoleIds(String maxSmallChildAgeForRoleIds) {
		_maxSmallChildAgeForRoleIds = maxSmallChildAgeForRoleIds;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LeaveRestriction.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LeaveRestriction toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LeaveRestriction)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LeaveRestrictionImpl leaveRestrictionImpl = new LeaveRestrictionImpl();

		leaveRestrictionImpl.setLeaveRestrictionId(getLeaveRestrictionId());
		leaveRestrictionImpl.setCompanyId(getCompanyId());
		leaveRestrictionImpl.setGroupId(getGroupId());
		leaveRestrictionImpl.setCreateDate(getCreateDate());
		leaveRestrictionImpl.setModifiedDate(getModifiedDate());
		leaveRestrictionImpl.setUserId(getUserId());
		leaveRestrictionImpl.setLeaveTypeId(getLeaveTypeId());
		leaveRestrictionImpl.setCannotExceedBalance(getCannotExceedBalance());
		leaveRestrictionImpl.setCantExceedBalForRoleIds(getCantExceedBalForRoleIds());
		leaveRestrictionImpl.setCannotApplyForPartialDay(getCannotApplyForPartialDay());
		leaveRestrictionImpl.setCantApplyPartialDayForRoleIds(getCantApplyPartialDayForRoleIds());
		leaveRestrictionImpl.setTermsQuestion(getTermsQuestion());
		leaveRestrictionImpl.setTermsQsnForRoleIds(getTermsQsnForRoleIds());
		leaveRestrictionImpl.setErrorTextIfTermsDeclined(getErrorTextIfTermsDeclined());
		leaveRestrictionImpl.setMinimumServicePeriod(getMinimumServicePeriod());
		leaveRestrictionImpl.setMinServicePeriodForRoleIds(getMinServicePeriodForRoleIds());
		leaveRestrictionImpl.setMaxConsecutiveLeaves(getMaxConsecutiveLeaves());
		leaveRestrictionImpl.setMaxConsecLeavesForRoleIds(getMaxConsecLeavesForRoleIds());
		leaveRestrictionImpl.setMaxSmallChildAgeApplicable(getMaxSmallChildAgeApplicable());
		leaveRestrictionImpl.setMaxSmallChildAgeForRoleIds(getMaxSmallChildAgeForRoleIds());

		leaveRestrictionImpl.resetOriginalValues();

		return leaveRestrictionImpl;
	}

	@Override
	public int compareTo(LeaveRestriction leaveRestriction) {
		long primaryKey = leaveRestriction.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LeaveRestriction)) {
			return false;
		}

		LeaveRestriction leaveRestriction = (LeaveRestriction)obj;

		long primaryKey = leaveRestriction.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LeaveRestrictionModelImpl leaveRestrictionModelImpl = this;

		leaveRestrictionModelImpl._originalGroupId = leaveRestrictionModelImpl._groupId;

		leaveRestrictionModelImpl._setOriginalGroupId = false;

		leaveRestrictionModelImpl._originalLeaveTypeId = leaveRestrictionModelImpl._leaveTypeId;

		leaveRestrictionModelImpl._setOriginalLeaveTypeId = false;

		leaveRestrictionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LeaveRestriction> toCacheModel() {
		LeaveRestrictionCacheModel leaveRestrictionCacheModel = new LeaveRestrictionCacheModel();

		leaveRestrictionCacheModel.leaveRestrictionId = getLeaveRestrictionId();

		leaveRestrictionCacheModel.companyId = getCompanyId();

		leaveRestrictionCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			leaveRestrictionCacheModel.createDate = createDate.getTime();
		}
		else {
			leaveRestrictionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			leaveRestrictionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			leaveRestrictionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		leaveRestrictionCacheModel.userId = getUserId();

		leaveRestrictionCacheModel.leaveTypeId = getLeaveTypeId();

		leaveRestrictionCacheModel.cannotExceedBalance = getCannotExceedBalance();

		leaveRestrictionCacheModel.cantExceedBalForRoleIds = getCantExceedBalForRoleIds();

		String cantExceedBalForRoleIds = leaveRestrictionCacheModel.cantExceedBalForRoleIds;

		if ((cantExceedBalForRoleIds != null) &&
				(cantExceedBalForRoleIds.length() == 0)) {
			leaveRestrictionCacheModel.cantExceedBalForRoleIds = null;
		}

		leaveRestrictionCacheModel.cannotApplyForPartialDay = getCannotApplyForPartialDay();

		leaveRestrictionCacheModel.cantApplyPartialDayForRoleIds = getCantApplyPartialDayForRoleIds();

		String cantApplyPartialDayForRoleIds = leaveRestrictionCacheModel.cantApplyPartialDayForRoleIds;

		if ((cantApplyPartialDayForRoleIds != null) &&
				(cantApplyPartialDayForRoleIds.length() == 0)) {
			leaveRestrictionCacheModel.cantApplyPartialDayForRoleIds = null;
		}

		leaveRestrictionCacheModel.termsQuestion = getTermsQuestion();

		String termsQuestion = leaveRestrictionCacheModel.termsQuestion;

		if ((termsQuestion != null) && (termsQuestion.length() == 0)) {
			leaveRestrictionCacheModel.termsQuestion = null;
		}

		leaveRestrictionCacheModel.termsQsnForRoleIds = getTermsQsnForRoleIds();

		String termsQsnForRoleIds = leaveRestrictionCacheModel.termsQsnForRoleIds;

		if ((termsQsnForRoleIds != null) && (termsQsnForRoleIds.length() == 0)) {
			leaveRestrictionCacheModel.termsQsnForRoleIds = null;
		}

		leaveRestrictionCacheModel.errorTextIfTermsDeclined = getErrorTextIfTermsDeclined();

		String errorTextIfTermsDeclined = leaveRestrictionCacheModel.errorTextIfTermsDeclined;

		if ((errorTextIfTermsDeclined != null) &&
				(errorTextIfTermsDeclined.length() == 0)) {
			leaveRestrictionCacheModel.errorTextIfTermsDeclined = null;
		}

		leaveRestrictionCacheModel.minimumServicePeriod = getMinimumServicePeriod();

		String minimumServicePeriod = leaveRestrictionCacheModel.minimumServicePeriod;

		if ((minimumServicePeriod != null) &&
				(minimumServicePeriod.length() == 0)) {
			leaveRestrictionCacheModel.minimumServicePeriod = null;
		}

		leaveRestrictionCacheModel.minServicePeriodForRoleIds = getMinServicePeriodForRoleIds();

		String minServicePeriodForRoleIds = leaveRestrictionCacheModel.minServicePeriodForRoleIds;

		if ((minServicePeriodForRoleIds != null) &&
				(minServicePeriodForRoleIds.length() == 0)) {
			leaveRestrictionCacheModel.minServicePeriodForRoleIds = null;
		}

		leaveRestrictionCacheModel.maxConsecutiveLeaves = getMaxConsecutiveLeaves();

		String maxConsecutiveLeaves = leaveRestrictionCacheModel.maxConsecutiveLeaves;

		if ((maxConsecutiveLeaves != null) &&
				(maxConsecutiveLeaves.length() == 0)) {
			leaveRestrictionCacheModel.maxConsecutiveLeaves = null;
		}

		leaveRestrictionCacheModel.maxConsecLeavesForRoleIds = getMaxConsecLeavesForRoleIds();

		String maxConsecLeavesForRoleIds = leaveRestrictionCacheModel.maxConsecLeavesForRoleIds;

		if ((maxConsecLeavesForRoleIds != null) &&
				(maxConsecLeavesForRoleIds.length() == 0)) {
			leaveRestrictionCacheModel.maxConsecLeavesForRoleIds = null;
		}

		leaveRestrictionCacheModel.maxSmallChildAgeApplicable = getMaxSmallChildAgeApplicable();

		String maxSmallChildAgeApplicable = leaveRestrictionCacheModel.maxSmallChildAgeApplicable;

		if ((maxSmallChildAgeApplicable != null) &&
				(maxSmallChildAgeApplicable.length() == 0)) {
			leaveRestrictionCacheModel.maxSmallChildAgeApplicable = null;
		}

		leaveRestrictionCacheModel.maxSmallChildAgeForRoleIds = getMaxSmallChildAgeForRoleIds();

		String maxSmallChildAgeForRoleIds = leaveRestrictionCacheModel.maxSmallChildAgeForRoleIds;

		if ((maxSmallChildAgeForRoleIds != null) &&
				(maxSmallChildAgeForRoleIds.length() == 0)) {
			leaveRestrictionCacheModel.maxSmallChildAgeForRoleIds = null;
		}

		return leaveRestrictionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{leaveRestrictionId=");
		sb.append(getLeaveRestrictionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", leaveTypeId=");
		sb.append(getLeaveTypeId());
		sb.append(", cannotExceedBalance=");
		sb.append(getCannotExceedBalance());
		sb.append(", cantExceedBalForRoleIds=");
		sb.append(getCantExceedBalForRoleIds());
		sb.append(", cannotApplyForPartialDay=");
		sb.append(getCannotApplyForPartialDay());
		sb.append(", cantApplyPartialDayForRoleIds=");
		sb.append(getCantApplyPartialDayForRoleIds());
		sb.append(", termsQuestion=");
		sb.append(getTermsQuestion());
		sb.append(", termsQsnForRoleIds=");
		sb.append(getTermsQsnForRoleIds());
		sb.append(", errorTextIfTermsDeclined=");
		sb.append(getErrorTextIfTermsDeclined());
		sb.append(", minimumServicePeriod=");
		sb.append(getMinimumServicePeriod());
		sb.append(", minServicePeriodForRoleIds=");
		sb.append(getMinServicePeriodForRoleIds());
		sb.append(", maxConsecutiveLeaves=");
		sb.append(getMaxConsecutiveLeaves());
		sb.append(", maxConsecLeavesForRoleIds=");
		sb.append(getMaxConsecLeavesForRoleIds());
		sb.append(", maxSmallChildAgeApplicable=");
		sb.append(getMaxSmallChildAgeApplicable());
		sb.append(", maxSmallChildAgeForRoleIds=");
		sb.append(getMaxSmallChildAgeForRoleIds());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("com.rknowsys.eapp.hrm.model.LeaveRestriction");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>leaveRestrictionId</column-name><column-value><![CDATA[");
		sb.append(getLeaveRestrictionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveTypeId</column-name><column-value><![CDATA[");
		sb.append(getLeaveTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cannotExceedBalance</column-name><column-value><![CDATA[");
		sb.append(getCannotExceedBalance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cantExceedBalForRoleIds</column-name><column-value><![CDATA[");
		sb.append(getCantExceedBalForRoleIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cannotApplyForPartialDay</column-name><column-value><![CDATA[");
		sb.append(getCannotApplyForPartialDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cantApplyPartialDayForRoleIds</column-name><column-value><![CDATA[");
		sb.append(getCantApplyPartialDayForRoleIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>termsQuestion</column-name><column-value><![CDATA[");
		sb.append(getTermsQuestion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>termsQsnForRoleIds</column-name><column-value><![CDATA[");
		sb.append(getTermsQsnForRoleIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorTextIfTermsDeclined</column-name><column-value><![CDATA[");
		sb.append(getErrorTextIfTermsDeclined());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>minimumServicePeriod</column-name><column-value><![CDATA[");
		sb.append(getMinimumServicePeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>minServicePeriodForRoleIds</column-name><column-value><![CDATA[");
		sb.append(getMinServicePeriodForRoleIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxConsecutiveLeaves</column-name><column-value><![CDATA[");
		sb.append(getMaxConsecutiveLeaves());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxConsecLeavesForRoleIds</column-name><column-value><![CDATA[");
		sb.append(getMaxConsecLeavesForRoleIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxSmallChildAgeApplicable</column-name><column-value><![CDATA[");
		sb.append(getMaxSmallChildAgeApplicable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxSmallChildAgeForRoleIds</column-name><column-value><![CDATA[");
		sb.append(getMaxSmallChildAgeForRoleIds());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LeaveRestriction.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LeaveRestriction.class
		};
	private long _leaveRestrictionId;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _userId;
	private String _userUuid;
	private long _leaveTypeId;
	private long _originalLeaveTypeId;
	private boolean _setOriginalLeaveTypeId;
	private boolean _cannotExceedBalance;
	private String _cantExceedBalForRoleIds;
	private boolean _cannotApplyForPartialDay;
	private String _cantApplyPartialDayForRoleIds;
	private String _termsQuestion;
	private String _termsQsnForRoleIds;
	private String _errorTextIfTermsDeclined;
	private String _minimumServicePeriod;
	private String _minServicePeriodForRoleIds;
	private String _maxConsecutiveLeaves;
	private String _maxConsecLeavesForRoleIds;
	private String _maxSmallChildAgeApplicable;
	private String _maxSmallChildAgeForRoleIds;
	private long _columnBitmask;
	private LeaveRestriction _escapedModel;
}